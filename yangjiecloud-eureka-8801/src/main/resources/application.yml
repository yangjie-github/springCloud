#eureka自我保护机制：
#    1. 某时刻某一个微服务不可用了，eureka不会立即清理，可以就会对改为服务的信息进行保存；
#    2. Eureka Server 在运行期间会去统计心跳失败比例在 15 分钟之内是否低于 85%，
#    如果低于 85%，Eureka Server 会将这些实例保护起来，让这些实例不会过期，
#    但是在保护期内如果服务刚好这个服务提供者非正常下线了，此时服务消费者就会拿到一个无效的服务实例，
#    此时会调用失败，对于这个问题需要服务消费者端要有一些容错机制，如重试，断路器等。
#    3. 我们在单机测试的时候很容易满足心跳失败比例在 15 分钟之内低于 85%，这个时候就会触发 Eureka 的保护机制，
#    一旦开启了保护机制，则服务注册中心维护的服务实例就不是那么准确了，
#    此时我们可以使用eureka.server.enable-self-preservation=false来关闭保护机制，这样可以确保注册中心中不可用的实例被及时的剔除（不推荐）。
#    4. Eureka 的自我保护模式是有意义的，该模式被激活后，它不会从注册列表中剔除因长时间没收到心跳导致租期过期的服务，而是等待修复，
#    直到心跳恢复正常之后，它自动退出自我保护模式。这种模式旨在避免因网络分区故障导致服务不可用的问题。
#    例如，两个客户端实例 C1 和 C2 的连通性是良好的，但是由于网络故障，C2 未能及时向 Eureka 发送心跳续约，
#    这时候 Eureka 不能简单的将 C2 从注册表中剔除。因为如果剔除了，C1 就无法从 Eureka 服务器中获取 C2 注册的服务，但是这时候 C2 服务是可用的。
#    所以，Eureka 的自我保护模式最好还是开启它。
server:
  port: 8801

eureka:
  server:
    enable-self-preservation: true # 设置为false关闭自我保护，不推荐
  instance:
    hostname: localhost #eureka服务端的实例名称
    #注意：这里要在hosts文件里面编写配置映射  后面需要配置eureka集群以及路由，索性一次性配置完成
    #127.0.0.1       eureka7001.com
  #127.0.0.1       eureka7002.com
  #127.0.0.1       eureka7003.com
  #127.0.0.1       zuul5555.com
  client:
    register-with-eureka: false     #false表示不向注册中心注册自己。
    fetch-registry: false     #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务
    service-url:
      #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址（单机）。暴露给服务的注册地址
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/

